#
# Logstash Server configuration for processing wazuh events from Filebeat to 
# OpenSearch server
#

input {
  beats {
    host => "%{SERVER_IP}"
    port => 5044
    ssl_enabled => false
#    ssl => true
#    ssl_certificate => "/usr/local/etc/logstash/certs/logstash.pem"
#    ssl_certificate_authorities => ["/usr/local/etc/logstash/certs/root-ca.pem"]
#    ssl_key => "/usr/local/etc/logstash/certs/logstash-key.pem"
#    ssl_verify_mode => "force_peer"
  }
}

filter {

  json {
    source => "message"
    target => "wazuhroot"
  }

  mutate {
        copy => { "[wazuhroot][agent]" => "agent" }
        copy => { "[wazuhroot][rule]" => "rule" }
        copy => { "[wazuhroot][predecoder]" => "predecoder" }
        copy => { "[wazuhroot][decoder]" => "decoder" }
        copy => { "[wazuhroot][id]" => "id" }
        copy => { "[wazuhroot][location]" => "location" }
        copy => { "[wazuhroot][manager]" => "manager" }
        copy => { "[wazuhroot][agent][name]" => "host" }
        copy => { "[wazuhroot][full_log]" => "full_log" }
        copy => { "[wazuhroot][data]" => "data" }
        copy => { "[wazuhroot][timestamp]" => "timestamp" }
	remove_field => [ "message", "wazuhroot"]
  }
}

filter {
  json {
    source => "[event][original]"
    target => "[wazuhevent]"
  }

  mutate {
        copy => { "[wazuhevent][syscheck][event]" => "syscheck.event" }
        copy => { "[wazuhevent][syscheck][mode]" => "syscheck.mode" }
        copy => { "[wazuhevent][syscheck][path]" => "syscheck.path" }
        copy => { "[wazuhevent][syscheck][gid_after]" => "syscheck.gid_after" }
        copy => { "[wazuhevent][syscheck][gname_after]" => "syscheck.gname_after" }
        copy => { "[wazuhevent][syscheck][inode_after]" => "syscheck.inode_after" }
        copy => { "[wazuhevent][syscheck][md5_after]" => "syscheck.md5_after" }
        copy => { "[wazuhevent][syscheck][perm_after]" => "syscheck.perm_after" }
        copy => { "[wazuhevent][syscheck][syscheck.sha1_after]" => "syscheck.sha1_after" }
        copy => { "[wazuhevent][syscheck][sha256_after]" => "syscheck.sha256_after" }
        copy => { "[wazuhevent][syscheck][size_after]" => "syscheck.size_after" }
        copy => { "[wazuhevent][syscheck][uid_after]" => "syscheck.uid_after" }
        copy => { "[wazuhevent][syscheck][uname_after]" => "syscheck.uname_after" }
        remove_field => [ "wazuhevent" ]
  }
}

#
# You can define it for output testing
#
#output {
#  file {
#    path => "/var/log/logstash/logstash-output.json"
#  }
#}
#
#

output {
  opensearch {
    hosts => ["https://%{SERVER_IP}:9200"]
    index => "wazuh-alerts-4.x-%{+YYYY.MM.dd}"
    user => "admin"
    password => "%%OPENSEARCH_ADMIN_PASS%%"
    ecs_compatibility => "disabled"
    ssl => true
    ssl_certificate_verification => false
#    cacert => "/usr/local/etc/logstash/certs/root-ca.pem"
#    tls_certificate => "/usr/local/etc/logstash/certs/logstash.pem"
#    tls_key => "/usr/local/etc/logstash/certs/logstash-key.pem"
    manage_template => true
    template => "/usr/local/etc/logstash/wazuh-template.json"
    template_name => "wazuh-template"
    template_overwrite => true
  }
}
